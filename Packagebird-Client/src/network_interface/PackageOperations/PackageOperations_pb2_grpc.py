# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import src.network_interface.PackageOperations.PackageOperations_pb2 as PackageOperations__pb2


class PackageOperationServicesStub(object):
    """Services associated with package operations 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPackages = channel.unary_unary(
                '/PackageOperations.PackageOperationServices/ListPackages',
                request_serializer=PackageOperations__pb2.PackageListRequest.SerializeToString,
                response_deserializer=PackageOperations__pb2.PackageList.FromString,
                )
        self.TestPackage = channel.unary_unary(
                '/PackageOperations.PackageOperationServices/TestPackage',
                request_serializer=PackageOperations__pb2.PackageTestRequest.SerializeToString,
                response_deserializer=PackageOperations__pb2.PackageTestResponse.FromString,
                )
        self.BuildPackage = channel.unary_unary(
                '/PackageOperations.PackageOperationServices/BuildPackage',
                request_serializer=PackageOperations__pb2.PackageBuildRequest.SerializeToString,
                response_deserializer=PackageOperations__pb2.PackageBuildResponse.FromString,
                )
        self.GetPackageList = channel.unary_unary(
                '/PackageOperations.PackageOperationServices/GetPackageList',
                request_serializer=PackageOperations__pb2.PackageRequest.SerializeToString,
                response_deserializer=PackageOperations__pb2.PackageListResponse.FromString,
                )


class PackageOperationServicesServicer(object):
    """Services associated with package operations 
    """

    def ListPackages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuildPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPackageList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PackageOperationServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPackages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPackages,
                    request_deserializer=PackageOperations__pb2.PackageListRequest.FromString,
                    response_serializer=PackageOperations__pb2.PackageList.SerializeToString,
            ),
            'TestPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.TestPackage,
                    request_deserializer=PackageOperations__pb2.PackageTestRequest.FromString,
                    response_serializer=PackageOperations__pb2.PackageTestResponse.SerializeToString,
            ),
            'BuildPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildPackage,
                    request_deserializer=PackageOperations__pb2.PackageBuildRequest.FromString,
                    response_serializer=PackageOperations__pb2.PackageBuildResponse.SerializeToString,
            ),
            'GetPackageList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPackageList,
                    request_deserializer=PackageOperations__pb2.PackageRequest.FromString,
                    response_serializer=PackageOperations__pb2.PackageListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PackageOperations.PackageOperationServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PackageOperationServices(object):
    """Services associated with package operations 
    """

    @staticmethod
    def ListPackages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PackageOperations.PackageOperationServices/ListPackages',
            PackageOperations__pb2.PackageListRequest.SerializeToString,
            PackageOperations__pb2.PackageList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PackageOperations.PackageOperationServices/TestPackage',
            PackageOperations__pb2.PackageTestRequest.SerializeToString,
            PackageOperations__pb2.PackageTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuildPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PackageOperations.PackageOperationServices/BuildPackage',
            PackageOperations__pb2.PackageBuildRequest.SerializeToString,
            PackageOperations__pb2.PackageBuildResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPackageList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PackageOperations.PackageOperationServices/GetPackageList',
            PackageOperations__pb2.PackageRequest.SerializeToString,
            PackageOperations__pb2.PackageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
