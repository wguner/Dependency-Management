// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: PackageOperations.proto

package PackageOperations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageOperationServicesClient is the client API for PackageOperationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageOperationServicesClient interface {
	ListPackages(ctx context.Context, in *PackageListRequest, opts ...grpc.CallOption) (*PackageList, error)
	TestPackage(ctx context.Context, in *PackageTestRequest, opts ...grpc.CallOption) (*PackageTestResponse, error)
	BuildPackage(ctx context.Context, in *PackageBuildRequest, opts ...grpc.CallOption) (*PackageBuildResponse, error)
	GetPackageList(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageListResponse, error)
}

type packageOperationServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageOperationServicesClient(cc grpc.ClientConnInterface) PackageOperationServicesClient {
	return &packageOperationServicesClient{cc}
}

func (c *packageOperationServicesClient) ListPackages(ctx context.Context, in *PackageListRequest, opts ...grpc.CallOption) (*PackageList, error) {
	out := new(PackageList)
	err := c.cc.Invoke(ctx, "/PackageOperations.PackageOperationServices/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageOperationServicesClient) TestPackage(ctx context.Context, in *PackageTestRequest, opts ...grpc.CallOption) (*PackageTestResponse, error) {
	out := new(PackageTestResponse)
	err := c.cc.Invoke(ctx, "/PackageOperations.PackageOperationServices/TestPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageOperationServicesClient) BuildPackage(ctx context.Context, in *PackageBuildRequest, opts ...grpc.CallOption) (*PackageBuildResponse, error) {
	out := new(PackageBuildResponse)
	err := c.cc.Invoke(ctx, "/PackageOperations.PackageOperationServices/BuildPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageOperationServicesClient) GetPackageList(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageListResponse, error) {
	out := new(PackageListResponse)
	err := c.cc.Invoke(ctx, "/PackageOperations.PackageOperationServices/GetPackageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageOperationServicesServer is the server API for PackageOperationServices service.
// All implementations must embed UnimplementedPackageOperationServicesServer
// for forward compatibility
type PackageOperationServicesServer interface {
	ListPackages(context.Context, *PackageListRequest) (*PackageList, error)
	TestPackage(context.Context, *PackageTestRequest) (*PackageTestResponse, error)
	BuildPackage(context.Context, *PackageBuildRequest) (*PackageBuildResponse, error)
	GetPackageList(context.Context, *PackageRequest) (*PackageListResponse, error)
	mustEmbedUnimplementedPackageOperationServicesServer()
}

// UnimplementedPackageOperationServicesServer must be embedded to have forward compatible implementations.
type UnimplementedPackageOperationServicesServer struct {
}

func (UnimplementedPackageOperationServicesServer) ListPackages(context.Context, *PackageListRequest) (*PackageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPackageOperationServicesServer) TestPackage(context.Context, *PackageTestRequest) (*PackageTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPackage not implemented")
}
func (UnimplementedPackageOperationServicesServer) BuildPackage(context.Context, *PackageBuildRequest) (*PackageBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildPackage not implemented")
}
func (UnimplementedPackageOperationServicesServer) GetPackageList(context.Context, *PackageRequest) (*PackageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageList not implemented")
}
func (UnimplementedPackageOperationServicesServer) mustEmbedUnimplementedPackageOperationServicesServer() {
}

// UnsafePackageOperationServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageOperationServicesServer will
// result in compilation errors.
type UnsafePackageOperationServicesServer interface {
	mustEmbedUnimplementedPackageOperationServicesServer()
}

func RegisterPackageOperationServicesServer(s grpc.ServiceRegistrar, srv PackageOperationServicesServer) {
	s.RegisterService(&PackageOperationServices_ServiceDesc, srv)
}

func _PackageOperationServices_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageOperationServicesServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PackageOperations.PackageOperationServices/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageOperationServicesServer).ListPackages(ctx, req.(*PackageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageOperationServices_TestPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageOperationServicesServer).TestPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PackageOperations.PackageOperationServices/TestPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageOperationServicesServer).TestPackage(ctx, req.(*PackageTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageOperationServices_BuildPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageOperationServicesServer).BuildPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PackageOperations.PackageOperationServices/BuildPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageOperationServicesServer).BuildPackage(ctx, req.(*PackageBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageOperationServices_GetPackageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageOperationServicesServer).GetPackageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PackageOperations.PackageOperationServices/GetPackageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageOperationServicesServer).GetPackageList(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageOperationServices_ServiceDesc is the grpc.ServiceDesc for PackageOperationServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageOperationServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PackageOperations.PackageOperationServices",
	HandlerType: (*PackageOperationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPackages",
			Handler:    _PackageOperationServices_ListPackages_Handler,
		},
		{
			MethodName: "TestPackage",
			Handler:    _PackageOperationServices_TestPackage_Handler,
		},
		{
			MethodName: "BuildPackage",
			Handler:    _PackageOperationServices_BuildPackage_Handler,
		},
		{
			MethodName: "GetPackageList",
			Handler:    _PackageOperationServices_GetPackageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PackageOperations.proto",
}
