// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: ProjectOperations.proto

package ProjectOperations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectOperationServicesClient is the client API for ProjectOperationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectOperationServicesClient interface {
	GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
}

type projectOperationServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectOperationServicesClient(cc grpc.ClientConnInterface) ProjectOperationServicesClient {
	return &projectOperationServicesClient{cc}
}

func (c *projectOperationServicesClient) GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, "/ProjectOperations.ProjectOperationServices/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectOperationServicesServer is the server API for ProjectOperationServices service.
// All implementations must embed UnimplementedProjectOperationServicesServer
// for forward compatibility
type ProjectOperationServicesServer interface {
	GetProject(context.Context, *ProjectRequest) (*ProjectResponse, error)
	mustEmbedUnimplementedProjectOperationServicesServer()
}

// UnimplementedProjectOperationServicesServer must be embedded to have forward compatible implementations.
type UnimplementedProjectOperationServicesServer struct {
}

func (UnimplementedProjectOperationServicesServer) GetProject(context.Context, *ProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectOperationServicesServer) mustEmbedUnimplementedProjectOperationServicesServer() {
}

// UnsafeProjectOperationServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectOperationServicesServer will
// result in compilation errors.
type UnsafeProjectOperationServicesServer interface {
	mustEmbedUnimplementedProjectOperationServicesServer()
}

func RegisterProjectOperationServicesServer(s grpc.ServiceRegistrar, srv ProjectOperationServicesServer) {
	s.RegisterService(&ProjectOperationServices_ServiceDesc, srv)
}

func _ProjectOperationServices_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOperationServicesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProjectOperations.ProjectOperationServices/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOperationServicesServer).GetProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectOperationServices_ServiceDesc is the grpc.ServiceDesc for ProjectOperationServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectOperationServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProjectOperations.ProjectOperationServices",
	HandlerType: (*ProjectOperationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ProjectOperationServices_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProjectOperations.proto",
}
