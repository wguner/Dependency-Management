// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: BuildTest.proto

package buildtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildTestServicesClient is the client API for BuildTestServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildTestServicesClient interface {
	Build(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*BuildInfo, error)
	Test(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*BuildInfo, error)
}

type buildTestServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildTestServicesClient(cc grpc.ClientConnInterface) BuildTestServicesClient {
	return &buildTestServicesClient{cc}
}

func (c *buildTestServicesClient) Build(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*BuildInfo, error) {
	out := new(BuildInfo)
	err := c.cc.Invoke(ctx, "/BuildTest.BuildTestServices/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildTestServicesClient) Test(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*BuildInfo, error) {
	out := new(BuildInfo)
	err := c.cc.Invoke(ctx, "/BuildTest.BuildTestServices/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildTestServicesServer is the server API for BuildTestServices service.
// All implementations must embed UnimplementedBuildTestServicesServer
// for forward compatibility
type BuildTestServicesServer interface {
	Build(context.Context, *PackageInfo) (*BuildInfo, error)
	Test(context.Context, *PackageInfo) (*BuildInfo, error)
	mustEmbedUnimplementedBuildTestServicesServer()
}

// UnimplementedBuildTestServicesServer must be embedded to have forward compatible implementations.
type UnimplementedBuildTestServicesServer struct {
}

func (UnimplementedBuildTestServicesServer) Build(context.Context, *PackageInfo) (*BuildInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedBuildTestServicesServer) Test(context.Context, *PackageInfo) (*BuildInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedBuildTestServicesServer) mustEmbedUnimplementedBuildTestServicesServer() {}

// UnsafeBuildTestServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildTestServicesServer will
// result in compilation errors.
type UnsafeBuildTestServicesServer interface {
	mustEmbedUnimplementedBuildTestServicesServer()
}

func RegisterBuildTestServicesServer(s grpc.ServiceRegistrar, srv BuildTestServicesServer) {
	s.RegisterService(&BuildTestServices_ServiceDesc, srv)
}

func _BuildTestServices_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildTestServicesServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuildTest.BuildTestServices/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildTestServicesServer).Build(ctx, req.(*PackageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildTestServices_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildTestServicesServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuildTest.BuildTestServices/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildTestServicesServer).Test(ctx, req.(*PackageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildTestServices_ServiceDesc is the grpc.ServiceDesc for BuildTestServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildTestServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BuildTest.BuildTestServices",
	HandlerType: (*BuildTestServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Build",
			Handler:    _BuildTestServices_Build_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _BuildTestServices_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BuildTest.proto",
}
